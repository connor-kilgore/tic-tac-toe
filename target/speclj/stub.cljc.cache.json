["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$speclj.stub","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$check-recording",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/connor_kilgore/Desktop/CleanCoders/apprenticeship/projects/ttt-cljs/target/speclj/stub.cljc","~:line",5,"~:column",8,"~:end-line",5,"~:end-column",23,"~:private",true,"~:arglists",["~#list",["~$quote",["^F",[[]]]]]],"^D",true,"^5","~$speclj.stub/check-recording","^?","target/speclj/stub.cljc","^C",23,"~:method-params",["^F",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^F",[null,null]],"^A",1,"~:variadic?",false,"^@",5,"~:ret-tag","~$clj-nil","^B",5,"~:max-fixed-arity",0,"~:fn-var",true,"^E",["^F",["^G",["^F",[[]]]]]],"~$*stubbed-invocations*",["^ ","^>",["^ ","^?","/Users/connor_kilgore/Desktop/CleanCoders/apprenticeship/projects/ttt-cljs/target/speclj/stub.cljc","^@",3,"^A",20,"^B",3,"^C",41,"~:dynamic",true,"~:declared",true],"^5","~$speclj.stub/*stubbed-invocations*","^?","target/speclj/stub.cljc","^C",41,"^A",1,"^R",true,"^@",3,"^S",true,"^B",3,"~:tag","~$any"],"~$invocations-of",["^ ","^=",null,"^>",["^ ","^?","/Users/connor_kilgore/Desktop/CleanCoders/apprenticeship/projects/ttt-cljs/target/speclj/stub.cljc","^@",48,"^A",7,"^B",48,"^C",21,"^E",["^F",["^G",["^F",[["~$name"]]]]],"~:doc","Returns a list of argument lists representing each invocation of the specified stub."],"^5","~$speclj.stub/invocations-of","^?","target/speclj/stub.cljc","^C",21,"^I",["^F",[["^X"]]],"^J",null,"^K",["^F",[null,null]],"^A",1,"^L",false,"^@",48,"^M","~$cljs.core/LazySeq","^B",48,"^O",1,"^P",true,"^E",["^F",["^G",["^F",[["^X"]]]]],"^Y","Returns a list of argument lists representing each invocation of the specified stub."],"~$params-match?",["^ ","^=",null,"^>",["^ ","^?","/Users/connor_kilgore/Desktop/CleanCoders/apprenticeship/projects/ttt-cljs/target/speclj/stub.cljc","^@",65,"^A",7,"^B",65,"^C",20,"^E",["^F",["^G",["^F",[["~$expected","~$actual"]]]]]],"^5","~$speclj.stub/params-match?","^?","target/speclj/stub.cljc","^C",20,"^I",["^F",[["^11","^12"]]],"^J",null,"^K",["^F",[null,null]],"^A",1,"^L",false,"^@",65,"^M","~$boolean","^B",65,"^O",2,"^P",true,"^E",["^F",["^G",["^F",[["^11","^12"]]]]]],"~$clear!",["^ ","^=",null,"^>",["^ ","^?","/Users/connor_kilgore/Desktop/CleanCoders/apprenticeship/projects/ttt-cljs/target/speclj/stub.cljc","^@",11,"^A",7,"^B",11,"^C",13,"^E",["^F",["^G",["^F",[[]]]]]],"^5","~$speclj.stub/clear!","^?","target/speclj/stub.cljc","^C",13,"^I",["^F",[[]]],"^J",null,"^K",["^F",[null,null]],"^A",1,"^L",false,"^@",11,"^M",["^4",[null,"^V"]],"^B",11,"^O",0,"^P",true,"^E",["^F",["^G",["^F",[[]]]]]],"~$stub",["^ ","^=",null,"^>",["^ ","^?","/Users/connor_kilgore/Desktop/CleanCoders/apprenticeship/projects/ttt-cljs/target/speclj/stub.cljc","^@",33,"^A",7,"^B",33,"^C",11,"^E",["^F",["^G",["^F",[["^X"],["^X","~$options"]]]]],"~:top-fn",["^ ","^L",false,"~:fixed-arity",2,"^O",2,"^I",[["^X"],["^X","^18"]],"^E",["^F",[["^X"],["^X","^18"]]],"^K",["^F",[null,null]]]],"^5","~$speclj.stub/stub","^?","target/speclj/stub.cljc","^C",11,"^19",["^ ","^L",false,"^1:",2,"^O",2,"^I",[["^X"],["^X","^18"]],"^E",["^F",[["^X"],["^X","^18"]]],"^K",["^F",[null,null]]],"^I",[["^X"],["^X","^18"]],"^J",null,"^1:",2,"^K",["^F",[null,null]],"^A",1,"^L",false,"~:methods",[["^ ","^1:",1,"^L",false,"^U","^V"],["^ ","^1:",2,"^L",false,"^U","~$function"]],"^@",33,"^B",33,"^O",2,"^P",true,"^E",["^F",[["^X"],["^X","^18"]]]],"~$first-invocation-of",["^ ","^=",null,"^>",["^ ","^?","/Users/connor_kilgore/Desktop/CleanCoders/apprenticeship/projects/ttt-cljs/target/speclj/stub.cljc","^@",55,"^A",7,"^B",55,"^C",26,"^E",["^F",["^G",["^F",[["^X"]]]]],"^Y","Returns the list of arguments passed into the first invocation of the specified stub, nil if it was never invoked."],"^5","~$speclj.stub/first-invocation-of","^?","target/speclj/stub.cljc","^C",26,"^I",["^F",[["^X"]]],"^J",null,"^K",["^F",[null,null]],"^A",1,"^L",false,"^@",55,"^M",["^4",["^V","^N"]],"^B",55,"^O",1,"^P",true,"^E",["^F",["^G",["^F",[["^X"]]]]],"^Y","Returns the list of arguments passed into the first invocation of the specified stub, nil if it was never invoked."],"~$invoke-delegate",["^ ","^=",null,"^>",["^ ","^?","/Users/connor_kilgore/Desktop/CleanCoders/apprenticeship/projects/ttt-cljs/target/speclj/stub.cljc","^@",29,"^A",11,"^B",29,"^C",26,"^D",true,"^E",["^F",["^G",["^F",[["^X","~$delegate","~$args"]]]]]],"^D",true,"^5","~$speclj.stub/invoke-delegate","^?","target/speclj/stub.cljc","^C",26,"^I",["^F",[["^X","^1A","^1B"]]],"^J",null,"^K",["^F",[null,null]],"^A",4,"^L",false,"^@",29,"^B",29,"^O",3,"^P",true,"^E",["^F",["^G",["^F",[["^X","^1A","^1B"]]]]]],"~$last-invocation-of",["^ ","^=",null,"^>",["^ ","^?","/Users/connor_kilgore/Desktop/CleanCoders/apprenticeship/projects/ttt-cljs/target/speclj/stub.cljc","^@",60,"^A",7,"^B",60,"^C",25,"^E",["^F",["^G",["^F",[["^X"]]]]],"^Y","Returns the list of arguments passed into the last invocation of the specified stub, nil if it was never invoked."],"^5","~$speclj.stub/last-invocation-of","^?","target/speclj/stub.cljc","^C",25,"^I",["^F",[["^X"]]],"^J",null,"^K",["^F",[null,null]],"^A",1,"^L",false,"^@",60,"^M",["^4",["^V","^N"]],"^B",60,"^O",1,"^P",true,"^E",["^F",["^G",["^F",[["^X"]]]]],"^Y","Returns the list of arguments passed into the last invocation of the specified stub, nil if it was never invoked."],"~$-record-invocation",["^ ","^=",null,"^>",["^ ","^?","/Users/connor_kilgore/Desktop/CleanCoders/apprenticeship/projects/ttt-cljs/target/speclj/stub.cljc","^@",16,"^A",7,"^B",16,"^C",25,"^E",["^F",["^G",["^F",[["^X","^1B"]]]]]],"^5","~$speclj.stub/-record-invocation","^?","target/speclj/stub.cljc","^C",25,"^I",["^F",[["^X","^1B"]]],"^J",null,"^K",["^F",[null,null]],"^A",1,"^L",false,"^@",16,"^M",["^4",[null,"^V"]],"^B",16,"^O",2,"^P",true,"^E",["^F",["^G",["^F",[["^X","^1B"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:*","~:else","~:return","~:invoke","~:throw"]],"~:order",["^1N","^1O","^1M","~:*","^1L"]],"^Y",null,"~:as-aliases",["^ "]]